# Function to view wrongly labeled images

# Get the input, label , softmax of prediction , image list

model_ft.eval()
pred_list = []
label_list = []
softmax_list = []
image_list = []
ct12 = 0 
for inputs1, labels1 in dataloaders['val']:
                ct12 += 1
                inputs1 = inputs1.to(device)
                labels1 = labels1.to(device)
                labels1 = labels1.type(torch.cuda.LongTensor)
                # zero the parameter gradients
                # optimizer.zero_grad()
                # forward
                # track history if only in train
                # with torch.set_grad_enabled(phase == 'train'):
                outputs1 = model_ft(inputs1)
                  
                    #print(outputs.shape)
                _, preds1 = torch.max(outputs1, 1)
                pred_list.extend(preds1.cpu().numpy())
                label_list.extend(labels1.data)
                #softmax_list.extend(softmax1(outputs1.cpu().detach().numpy(),axis =1))
                image_list.extend(inputs1)
                if ct12 == 50:
                  break

def softmax1(X, theta = 1.0, axis = None):
    """
    Compute the softmax of each element along an axis of X.

    Parameters
    ----------
    X: ND-Array. Probably should be floats. 
    theta (optional): float parameter, used as a multiplier
        prior to exponentiation. Default = 1.0
    axis (optional): axis to compute values along. Default is the 
        first non-singleton axis.

    Returns an array the same size as X. The result will sum to 1
    along the specified axis.
    """

    # make X at least 2d
    y = np.atleast_2d(X)

    # find axis
    if axis is None:
        axis = next(j[0] for j in enumerate(y.shape) if j[1] > 1)

    # multiply y against the theta parameter, 
    y = y * float(theta)

    # subtract the max for numerical stability
    y = y - np.expand_dims(np.max(y, axis = axis), axis)
    
    # exponentiate y
    y = np.exp(y)

    # take the sum along the specified axis
    ax_sum = np.expand_dims(np.sum(y, axis = axis), axis)

    # finally: divide elementwise
    p = y / ax_sum

    # flatten if X was 1D
    if len(X.shape) == 1: p = p.flatten()

    return p
    
 
from mpl_toolkits.axes_grid1 import AxesGrid, ImageGrid
#@title Default title text
## imshow works when we have transformed the image using some transformation
def imshow(axis, inp):
    """Denormalize and show"""
    inp = inp.numpy().transpose((1, 2, 0)) ## This line of code corrects the dimension issue that occurs during transformation 
    mean = np.array([0.485, 0.456, 0.406])
    std = np.array([0.229, 0.224, 0.225])
    inp = std * inp + mean
    inp = np.clip(inp, 0, 1)
    axis.imshow(inp)
    

def viewimage(image_list,diff):
    """ Function to view first 10 images from Dataset with Image and label.	"""
    ct = 0
    fig = plt.figure(1, figsize=(16, 24))
    grid = ImageGrid(fig, 111, nrows_ncols=(3, 8), axes_pad=0.05)
    for i in range(len(image_list)):
        if diff[i] != 0 :
          
          img = image_list[i].cpu()
        
          
          #img2 = img.crop((100,0,280,512))
          print(diff[i])
          ax = grid[ct]
          imshow(ax,img)
          ct += 1
          #ax.imshow(np.asarray(img))
          if ct == 24 :
            break

viewimage(image_list,diff)
